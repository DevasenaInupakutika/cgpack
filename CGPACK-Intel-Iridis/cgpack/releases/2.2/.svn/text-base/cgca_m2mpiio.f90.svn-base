!$Id$

!*robodoc*m* CGPACK/cgca_m2mpiio
!  NAME
!    cgca_m2mpiio
!  SYNOPSIS

module cgca_m2mpiio

!  AUTHOR
!    David Henty, modified by Anton Shterenlikht
!  COPYRIGHT
!   Note that this routine has special Copyright conditions.
!
!    !----------------------------------------------------------------------------!
!    !                                                                            !
!    !  MPI-IO routine for Fortran Coarrays                                       !
!    !                                                                            !
!    !  David Henty, EPCC; d.henty@epcc.ed.ac.uk                                  !
!    !                                                                            !
!    !  Copyright 2013 the University of Edinburgh                                !
!    !                                                                            !
!    !  Licensed under the Apache License, Version 2.0 (the "License");           !
!    !  you may not use this file except in compliance with the License.          !
!    !  You may obtain a copy of the License at                                   !
!    !                                                                            !
!    !      http://www.apache.org/licenses/LICENSE-2.0                            !
!    !                                                                            !
!    !  Unless required by applicable law or agreed to in writing, software       !
!    !  distributed under the License is distributed on an "AS IS" BASIS,         !
!    !  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  !
!    !  See the License for the specific language governing permissions and       !
!    !  limitations under the License.                                            !
!    !                                                                            !
!    !----------------------------------------------------------------------------!
!  DESCRIPTION
!    Module dealing with parallel IO using MPI/IO library
!  CONTAINS
!    cgca_pswci
!  USES
!    cgca_m1co, MPI library
!  USED BY
!    cgca
!  SOURCE

use cgca_m1co
use mpi
implicit none

integer, parameter, private :: totdim = 4, arrdim = totdim-1, coardim = 3

private

public :: cgca_pswci

contains

!*roboend*


!*robodoc*s* cgca_m2mpiio/cgca_pswci
!  NAME
!    cgca_pswci
!  SYNOPSIS

subroutine cgca_pswci(coarray,stype,fname)

!  INPUTS
 
integer(kind=iarr),allocatable,intent(in) :: coarray(:,:,:,:)[:,:,:]
integer(kind=idef),intent(in) :: stype
character(len=*),intent(in) :: fname

!  AUTHOR
!    Anton Shterenlikht, adapted from the code written by David Henty, EPCC
!  SIDE EFFECTS
!    A single binary file is created using MPI/IO with contents of coarray.
!  DESCRIPTION
!    Parrallel Stream Write Coarray of Integers:
!    - coarray - what array to dump
!    - stype - what cell state type to dump
!    - fname - what file name to use
!  NOTES
!    All images must call this routine!
!
!    MPI must be initialised prior to calling this routine,
!    most probably in the main program.
!    Likewise MPI must be terminated only when no further MPI
!    routines can be called. This will most likely be in the
!    main program. 
!    There are some assumptions about the shape of the passed array.
!
!    The default integer is assumed for the array at present! 
!  USES
!    cgca_m1co, MPI library
!  USED BY
!    none, end user.
!  SOURCE

integer :: img, nimages, comm, ierr, rank, mpisize, &
  filetype, mpi_subarray, fh
integer, dimension(totdim) :: arraysize
integer, dimension(arrdim) :: arraysubsize, arraystart, arraygsize
integer, dimension(coardim) :: arraycosize, copos
integer (kind=MPI_OFFSET_KIND) :: disp = 0
integer, dimension(MPI_STATUS_SIZE) :: status

img  = this_image()
nimages = num_images()

arraysize(:) = shape(coarray)
copos(:) = this_image(coarray)

! Subtract halos for array subsize

arraysubsize(:) = arraysize (1:arrdim) - 2
arraycosize(:) = ucobound(coarray) - lcobound(coarray) + 1

! Does the array fit exactly?

if (arraycosize(1)*arraycosize(2)*arraycosize(3) .ne. nimages) then
  write(*,*) 'ERROR: non-conforming coarray!'
  error stop
end if

comm = MPI_COMM_WORLD

call MPI_Comm_size(comm, mpisize, ierr)
call MPI_Comm_rank(comm, rank, ierr)

! Sanity check

if (mpisize .ne. nimages .or. rank .ne. img-1) then
  write(*,*) 'ERROR: MPI / coarray mismatch!'
  error stop
end if
     
!
! Define filetype for this process, ie what portion of the global array
! this process owns; starting positions use C-indexing (ie counting from 0).
!

arraygsize(:) = arraysubsize(:) * arraycosize(:)
arraystart(:) = arraysubsize(:) * (copos(:)-1)

! write (*,*) "image=",img, "arraysize=", arraysize, "copos=", copos, &
!  "arraysubsize=", arraysubsize, "arraycosize=", arraycosize, &
!  "arraygsize=", arraygsize, "arraystart=", arraystart, "stype=", stype

call MPI_Type_create_subarray(arrdim, arraygsize, arraysubsize, arraystart, &
                              MPI_ORDER_FORTRAN, MPI_INTEGER, &
                              filetype, ierr)

call MPI_Type_commit(filetype, ierr)

!
! Define subarray for this process, ie what portion of the local array
! is to be written (excludes halos); starting positions use C-indexing.
!
!
!arraystart(:) = 1
!
!call MPI_Type_create_subarray(arrdim, arraysize(1:arrdim), arraysubsize, arraystart, &
!                              MPI_ORDER_FORTRAN, MPI_INTEGER, &
!                              mpi_subarray, ierr)
!
!call MPI_Type_commit(mpi_subarray, ierr)
!
!
!  Open the file for reading only and attach to file handle fh
!  No IO hints are passed since MPI_INFO_NULL is specified
!

call MPI_File_open(comm, fname, ior(MPI_MODE_WRONLY, MPI_MODE_CREATE), &
                   MPI_INFO_NULL, fh, ierr)

if (ierr /= MPI_SUCCESS) write(*,*) 'Open error on rank ', rank

!
!  Set view for this process using appropriate datatype
!

call MPI_File_set_view(fh, disp, MPI_INTEGER, filetype, 'native', &
                       MPI_INFO_NULL, ierr)

if (ierr /= MPI_SUCCESS) then
  write(*,*) 'View error on rank ', rank
  error stop
end if

!
!  Write all the data for this process.
!  Remove halo data by passing an explicit Fortran subarray
!

  call MPI_File_write_all(fh, &
       coarray(1,1,1, stype), &
       arraysubsize(1)*arraysubsize(2)*arraysubsize(3), &
       MPI_INTEGER, status, ierr)

!
!  Write all the data for this process.
!  Remove halo data by passing an MPI subarray type
!
!
!call MPI_File_write_all(fh, coarray(:,:,:,1), mpi_subarray, status, ierr)

if (ierr /= MPI_SUCCESS) then
  write(*,*) 'Write error on rank ', rank
  error stop
end if

!
!  Close file
!

call MPI_File_close(fh, ierr)

if (ierr /= MPI_SUCCESS) write(*,*) 'Close error on rank ', rank

call MPI_Type_free(filetype, ierr)
!call MPI_Type_free(mpi_subarray, ierr)

end subroutine cgca_pswci

!*roboend*

end module cgca_m2mpiio
